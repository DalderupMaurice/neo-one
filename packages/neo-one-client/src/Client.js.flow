/* @flow */
import type BigNumber from 'bignumber.js';
import type { Observable } from 'rxjs/Observable';
import type { Param as ScriptBuilderParam } from '@neo-one/client-core';

import type {
  AddressString,
  AssetRegister,
  ContractRegister,
  Hash160String,
  Hash256String,
  RawInvocationResult,
  InvokeTransactionOptions,
  Param,
  Transfer,
  NetworkType,
  TransactionOptions,
  PublishReceipt,
  RegisterAssetReceipt,
  SmartContract,
  SmartContractDefinition,
  TransactionReceipt,
  TransactionResult,
  InvokeReceiptInternal,
  UserAccount,
  UserAccountProvider,
} from './types'; // eslint-disable-line

declare export default class Client<
  TUserAccountProvider: UserAccountProvider
> {
  constructor(
    userAccountProvider: TUserAccountProvider,
  ): Client<TUserAccountProvider>;

  +userAccountProvider: TUserAccountProvider;

  +currentAccount$: Observable<?UserAccount>;
  +accounts$: Observable<Array<UserAccount>>;
  +networks$: Observable<Array<NetworkType>>;

  getCurrentAccount(): ?UserAccount;
  getAccounts(): Array<UserAccount>;
  getNetworks(): Array<NetworkType>;

  transfer(
    amount: BigNumber,
    asset: Hash256String,
    to: AddressString,
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;
  transfer(
    transfers: Array<Transfer>,
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;

  claim(
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;

  publish(
    contract: ContractRegister,
    options?: TransactionOptions,
  ): Promise<TransactionResult<PublishReceipt>>;

  registerAsset(
    asset: AssetRegister,
    options?: TransactionOptions,
  ): Promise<TransactionResult<RegisterAssetReceipt>>;

  issue(
    asset: Hash256String,
    amount: BigNumber,
    to: AddressString,
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;
  issue(
    transfers: Array<Transfer>,
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;

  smartContract(definition: SmartContractDefinition): SmartContract;

  _invoke(
    contract: Hash160String,
    method: string,
    params: Array<?ScriptBuilderParam>,
    paramsZipped: Array<[string, ?Param]>,
    verify: boolean,
    options?: InvokeTransactionOptions,
  ): Promise<TransactionResult<InvokeReceiptInternal>>;
  _call(
    contract: Hash160String,
    method: string,
    params: Array<?ScriptBuilderParam>,
    options?: TransactionOptions,
  ): Promise<RawInvocationResult>;
}
